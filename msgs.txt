#lib/Idval/Select.pm:    fatal("Unknown function Idval::ValidateFuncs::$funcname") unless check_function($funcname);
#lib/Idval/Select.pm:    verbose("\n\nregex is: \"$combo\"\n\n\n");
lib/Idval/FirstTime.pm:        idv_print("$prompt $displayed_default $def");
lib/Idval/FirstTime.pm:            idv_print("Unrecognized response \"$ans\"\n");
lib/Idval/FirstTime.pm:        idv_print(sprintf("%2d %s\n", $i, $choices[$i]));
lib/Idval/FirstTime.pm:        idv_print("$prompt $displayed_default $def");
lib/Idval/FirstTime.pm:        idv_print("Response \"$ans\" is outside the range\n");
lib/Idval/FirstTime.pm:            idv_print(sprintf("%2d %s\n", $i, $choices[$i]));
lib/Idval/FirstTime.pm:    idv_print(qq{
lib/Idval/FirstTime.pm:idv_print(qq{
lib/Idval/FirstTime.pm:    idv_print(qq{
#lib/Idval/Data/Commands/print.pm:        Idval::FileIO->new($outputfile, '>') or fatal("Can't open $outputfile for writing: $ERRNO\n");
#lib/Idval/Data/Commands/print.pm:    $help_file->man_info('print', $pod_input);
#lib/Idval/Data/Commands/help.pm:        fatal("Unrecognized command name \"$name\"\n") unless defined($cmd);
#lib/Idval/Data/Commands/help.pm:        fatal("No help information for command name \"$name\"\n") unless defined($help_file->man_info($cmd_name));
#lib/Idval/Data/Commands/help.pm:            silent_q($help_file->get_full_description($cmd_name));
#lib/Idval/Data/Commands/help.pm:            silent_q($help_file->get_synopsis($cmd_name));
#lib/Idval/Data/Commands/help.pm:            silent_q("\nUse \"help -v $cmd_name\" for more information.\n");
#lib/Idval/Data/Commands/help.pm:        silent_q($help_file->get_full_description('main'));
#lib/Idval/Data/Commands/help.pm:       silent_q("\nAvailable commands:\n");
#lib/Idval/Data/Commands/help.pm:           silent_q("  ", $help_file->get_short_description($cmd_name), "\n");
#lib/Idval/Data/Commands/help.pm:    $help_file->man_info('help', $pod_input);
#lib/Idval/Data/Commands/store.pm:    fatal("Bad \"datastore\" (ref is \"", ref $datastore , "\"\n") unless ref $datastore eq 'Idval::Collection';
#lib/Idval/Data/Commands/store.pm:    fatal("Bad \"providers\" (ref is \"", ref $providers , "\"\n") unless ref $providers eq 'Idval::ProviderMgr';
#lib/Idval/Data/Commands/store.pm:    $help_file->man_info('store', $pod_input);
#lib/Idval/Data/Commands/about.pm:        silent_q(join("\n", @msgs), "\n");
#lib/Idval/Data/Commands/about.pm:        silent_q("Reads:\n");
#lib/Idval/Data/Commands/about.pm:            silent_q("\tReads tags from: $reader_type using ", $provider->{NAME}, "\n");
#lib/Idval/Data/Commands/about.pm:        silent_q("Writes:\n");
#lib/Idval/Data/Commands/about.pm:            silent_q("\tWrites tags to: $writer_type using ", $provider->{NAME}, "\n");
#lib/Idval/Data/Commands/about.pm:        silent_q("Types:\n");
#lib/Idval/Data/Commands/about.pm:            silent_q("\tType $filetype files have extensions: ",
#lib/Idval/Data/Commands/about.pm:        silent_q("\n");
#lib/Idval/Data/Commands/about.pm:            silent_q("\tClass $class comprises types: ",
#lib/Idval/Data/Commands/about.pm:            silent_q("\nProvider paths:\n");
#lib/Idval/Data/Commands/about.pm:                silent_q("\tProvider $provider uses ", $provider_paths{$provider}, "\n");
#lib/Idval/Data/Commands/about.pm:            silent_q("\nProvider info:\n");
#lib/Idval/Data/Commands/about.pm:                    silent_q($infoline);
#lib/Idval/Data/Commands/about.pm:#                 silent_q($infoline);
#lib/Idval/Data/Commands/about.pm:    $help_file->man_info('about', $pod_input);
#lib/Idval/Data/Commands/validate.pm:        silent_q(sprintf "%s:%d: error: For %s, %s\n", $filename, $linenumber, $tagname, $gripe);
#lib/Idval/Data/Commands/validate.pm:    $help_file->man_info('validate', $pod_input);
#lib/Idval/Data/Commands/gettags.pm:        idv_print("Need to specify at least one directory\n") if ($result and !@args);
#lib/Idval/Data/Commands/gettags.pm:        idv_print($help_file->get_full_description('gettags'));
#lib/Idval/Data/Commands/gettags.pm:    info_q("Collecting directory information. Please wait...\n");
#lib/Idval/Data/Commands/gettags.pm:        idv_dbg("Checking \"$key\"\n");
#lib/Idval/Data/Commands/gettags.pm:    $help_file->man_info('gettags', $pod_input);
#lib/Idval/Data/Commands/set.pm:        idv_print("set commands are:\n", join("    \n", qw(conf debug level)), "\n");
#lib/Idval/Data/Commands/set.pm:        idv_print("  Module spec       level\n");
#lib/Idval/Data/Commands/set.pm:            idv_print(sprintf("%-20s  %d\n", $modhash->{$item}->{STR}, $modhash->{$item}->{LEVEL}));
#lib/Idval/Data/Commands/set.pm:        #idv_print("Debug mask is: ", join(' ', @newmods), "\n");
#lib/Idval/Data/Commands/set.pm:            idv_print("Available debug levels are:\n");
#lib/Idval/Data/Commands/set.pm:                idv_print(sprintf("    %8s: %d\n", $level_to_name{$level}, $level));
#lib/Idval/Data/Commands/set.pm:            idv_print("\nCurrent level is: $current_level (", $level_to_name{$current_level}, ")\n");
#lib/Idval/Data/Commands/set.pm:                idv_print("\nNew level is: $current_level (", $level_to_name{$current_level}, ")\n");
#lib/Idval/Data/Commands/set.pm:                idv_print("\nNew level is: $current_level (", $level_to_name{$current_level}, ")\n");
#lib/Idval/Data/Commands/set.pm:                idv_print("Unrecognized level \"$newlevel\"\n");
#lib/Idval/Data/Commands/set.pm:        idv_print("Unrecognized \"set\" command: \"", join(' ', @ARGV), "\" (try \"help set\")\n");
#lib/Idval/Data/Commands/set.pm:   $help_file->man_info('set', $pod_input);
#lib/Idval/Data/Commands/update.pm:    fatal("Need an input file for update\n") unless (defined($inputfile) && $inputfile);
#lib/Idval/Data/Commands/update.pm:    fatal($@) if $@;
#lib/Idval/Data/Commands/update.pm:    #idv_dbg("update: datastore:", Dumper($datastore));
#lib/Idval/Data/Commands/update.pm:    #idv_dbg("update: new datastore:", Dumper($new_datastore));
#lib/Idval/Data/Commands/update.pm:        #idv_dbg("in update with: ", Dumper($tag_record));
#lib/Idval/Data/Commands/update.pm:    $help_file->man_info('update', $pod_input);
#lib/Idval/Data/Commands/read.pm:    verbose("Reading tag information from \"$loc\"\n");
#lib/Idval/Data/Commands/read.pm:    $help_file->man_info('read', $pod_input);
#lib/Idval/Data/Commands/select.pm:    info_q({force_match => 1}, "Processed $numrecs records.\n") unless $quiet;
#lib/Idval/Data/Commands/select.pm:        my $out = Idval::FileIO->new($outputfile, '>') or fatal("Can't open $outputfile for writing: $ERRNO\n");
#lib/Idval/Data/Commands/select.pm:#    $help_file->man_info('select', $pod_input);
#lib/Idval/Data/Commands/diff.pm:    $help_file->man_info('diff', $pod_input);
#lib/Idval/Data/Commands/sync.pm:        verbose("Remote file \"$remote_pathname\" does not exist. Will create.\n");
#lib/Idval/Data/Commands/sync.pm:        verbose("Remote file \"$remote_pathname\" is older than local file \"$local_pathname\". Will convert.\n");
#lib/Idval/Data/Commands/sync.pm:        verbose("Remote file \"$remote_pathname\" is newer than local file \"$local_pathname\". Will not convert.\n");
#lib/Idval/Data/Commands/sync.pm:    #idv_dbg("Record is: ", Dumper($tag_record));
#lib/Idval/Data/Commands/sync.pm:        #idv_dbg(Dumper($config));
#lib/Idval/Data/Commands/sync.pm:#         idv_dbg("sync_dest = \"$sync_dest\", do_sync = \"$do_sync\"\n");
#lib/Idval/Data/Commands/sync.pm:    idv_dbg("Checking ", $tag_record->get_name(), "\n");
#lib/Idval/Data/Commands/sync.pm:    chatty("source type is \"$src_type\" dest type is \"$dest_type\"; filter is \"$filter\"\n");
#lib/Idval/Data/Commands/sync.pm:    chatty("src: $src_type to dest: $dest_type yields converter ", $prov->query('name'), "\n");
#lib/Idval/Data/Commands/sync.pm:        chatty("Converting \"$src_path\" to \"$dest_path\"\n");
#lib/Idval/Data/Commands/sync.pm:        chatty("Did not convert \"$src_path\" to \"$dest_path\"\n");
#lib/Idval/Data/Commands/sync.pm:    #idv_dbg("Getting provider for src:$src_type dest:$dest_type\n");
#lib/Idval/Data/Commands/sync.pm:        Idval::Common::get_logger()->fatal("Sync: Need at least one argument to sync\n");
#lib/Idval/Data/Commands/sync.pm:        Idval::Common::get_logger()->fatal("Sync: Need at least one argument to sync\n");
#lib/Idval/Data/Commands/sync.pm:            Idval::Common::get_logger()->fatal("Sync: argument error ($orig_args)\n");
#lib/Idval/Data/Commands/sync.pm:    info_q("processed remaining  total  percent  elapsed  remaining    total\n");
#lib/Idval/Data/Commands/sync.pm:    info_q(sprintf("%5d %9d %9d %5.0f%%     %8s  %8s  %8s\n",
#lib/Idval/Data/Commands/sync.pm:    info_q(sprintf("%5d %9d %9d %5.0f%%     %8s  %8s %8s\n",
#lib/Idval/Data/Commands/sync.pm:    chatty("For $src_path\n");
#lib/Idval/Data/Commands/sync.pm:    chatty("   remote top is \"$remote_top\"\n");
#lib/Idval/Data/Commands/sync.pm:    chatty("   dest name is \"$dest_name\" (", $prov->query('name'), ")\n");
#lib/Idval/Data/Commands/sync.pm:#     #idv_dbg("For $src_path\n");
#lib/Idval/Data/Commands/sync.pm:#     #idv_dbg("   remote top is \"$remote_top\"\n");
#lib/Idval/Data/Commands/sync.pm:        chatty("sync_dest is a directory: sync dest is \"$sync_dest\"\n");
#lib/Idval/Data/Commands/sync.pm:        idv_dbg("Found tags to expand: ", join(',', @tags), "\n");
#lib/Idval/Data/Commands/sync.pm:        idv_dbg("dest path is now: \"$dest_path\"\n");
#lib/Idval/Data/Commands/sync.pm:    $help_file->man_info('sync', $pod_input);
#lib/Idval/Data/Providers/Converters/copy.pm:    chatty("Copying \"$src\" to \"$dest\"\n");
#lib/Idval/Data/Providers/Converters/sox.pm:        idv_dbg("No sox args. merge_blocks result is: ", Dumper($vars));
#lib/Idval/Data/Providers/Converters/sox.pm:        fatal("sox filter was called, but there were no arguments in \"sox_args\". Selectors are ", Dumper($tag_record));
#lib/Idval/Data/Providers/Converters/sox.pm:    verbose("sox filter command: $path ", join(' ', Idval::Common::mkarglist(@sox_args_list)), "\n");
#lib/Idval/Data/Providers/Converters/sox.pm:    $help_file->man_info('sox', $pod_input);
#lib/Idval/Data/Providers/Taggers/metaflac.pm:            idv_warn('Getters::BadFlac', $line, $filename, "\n");
#lib/Idval/Data/Providers/Taggers/metaflac.pm:            chatty("ref record: ", ref $tag_record, "\n");
#lib/Idval/Data/Providers/Taggers/metaflac.pm:    fatal("Unblessed tag_record reference (ref is \"", ref $tag_record, "\"") unless ref $tag_record eq 'Idval::Record';
#lib/Idval/Data/Providers/Taggers/Vorbiscomment.pm:            idv_warn('Getters::BadVorbis', $line, $filename, "\n");
#lib/Idval/Data/Providers/Taggers/Vorbiscomment.pm:            chatty("ref record: ", ref $tag_record, "\n");
#lib/Idval/Data/Providers/Taggers/Vorbiscomment.pm:    #idv_dbg("\nGot tag:\n");
#lib/Idval/Data/Providers/Taggers/Vorbiscomment.pm:    #idv_dbg(join("\n", $tag_record->format_record()));
#lib/Idval/Data/Providers/Taggers/abc.pm:    $self->save_info();
#lib/Idval/Data/Providers/Taggers/abc.pm:        my $fh = Idval::FileIO->new($fname, "r") || fatal("Can't open \"$fname\" for reading: $!\n");
#lib/Idval/Data/Providers/Taggers/abc.pm:    #idv_dbg("File $fileid:\n");
#lib/Idval/Data/Providers/Taggers/abc.pm:#                 idv_dbg("Parsing: Field $fieldid, tagvalue <$text2>, comment <$text1>\n");
#lib/Idval/Data/Providers/Taggers/abc.pm:#                 idv_dbg("Parsing: other Field \"$fieldid\", text <$text1>\n");
#lib/Idval/Data/Providers/Taggers/abc.pm:    idv_dbg("Got", Dumper(\%tags));
#lib/Idval/Data/Providers/Taggers/abc.pm:    my $fh = Idval::FileIO->new($fname, "r") || fatal("Can't open \"$fname\" for reading: $!\n");
#lib/Idval/Data/Providers/Taggers/abc.pm:            $fh = Idval::FileIO->new($fname, "w") || fatal("Can't open \"$fname\" for writing: $!\n");
#lib/Idval/Data/Providers/Taggers/MP3_Tag.pm:    #idv_dbg("MP3_Tags FWD_MAPPING: ", Dumper($self->{FWD_MAPPING}));
#lib/Idval/Data/Providers/Taggers/MP3_Tag.pm:    #idv_dbg("MP3_Tags REV_MAPPING: ", Dumper($self->{REV_MAPPING}));
#lib/Idval/Data/Providers/Taggers/MP3_Tag.pm:        #idv_dbg(STDERR "MP3: Yes to ID3v1\n");
#lib/Idval/Data/Providers/Taggers/MP3_Tag.pm:    fatal("Undefined tag record\n") unless defined($tag_record);
#lib/Idval/Data/Providers/Taggers/MP3_Tag.pm:            #fatal("Undefined value for tag \"$tagname\"") unless defined($tagvalue);
#lib/Idval/FileIO.pm:    fatal("Unrecognized service name \"$service_name\" in Idval::FileIO") if $service_name ne "io_type";
#lib/Idval/FileIO.pm:                      fatal("Unrecognized service \"$service\" for service name io_type");
#lib/Idval/FileIO.pm:    fatal("File system implementation not set.\n" .
#lib/Idval/FileIO.pm:    fatal("undefined self") unless defined($self);
#lib/Idval/Collection.pm:    fatal("Huh?") unless defined $self->{CREATIONDATE};
#lib/Idval/ServiceLocator.pm:        verbose("Registering callback with \"$service_name/$callback_name/$callback_routine_name\"\n");
#lib/Idval/ServiceLocator.pm:        fatal("Unregistered service \"$service_name\" requested.\n");
#lib/Idval/Logger.pm:            $self->silent_q({debugmask=>1}, "\n");
#lib/Idval/Provider.pm:            verbose("Checking \"$testexe\"\n"); ##debug1
#lib/Idval/Provider.pm:                verbose("Found \"$testexe\"\n"); ##debug1
#lib/Idval/Provider.pm:    #fatal("Could not find program \"$name\"\n") if !$exe;
#lib/Idval/FileString.pm:        fatal("Filename \"$filename\" opened in read mode but it doesn't exist.\n");
#lib/Idval/FileString.pm:            fatal("Maximum directory depth exceeded. So far, the name is: \"" .
#lib/Idval/FileString.pm:        fatal("A regular file ($dpath) was found while creating the directory path \"$path\"\n");
#lib/Idval/FileString.pm:    fatal("Undefined path\n") unless defined($path);
#lib/Idval/FileString.pm:    fatal("File \"$path\" not found\n") unless idv_test_isfile($path);
#lib/Idval/Command.pm:    chatty("Idval::Command creating object from \"$cmd_pkg\"\n");
#lib/Idval/Command.pm:        fatal("No \"main\" routine in command \"$cmd_pkg\"");
#lib/Idval/TypeMap.pm:    #idv_dbg("TypeMap: FILETYPE map is: ", Dumper($self->{MAPPING}->{FILETYPE}));
#lib/Idval/TypeMap.pm:    fatal("Undefined provider object") unless defined($prov);
#lib/Idval/TypeMap.pm:    idv_dbg("TypeMap::get_filetype_from_file: ext is \"$ext\"\n");
lib/Idval/Help.pm:    my $input = $self->man_info($name);
#lib/Idval/Record.pm:        fatal("A new Record must have a filename.") if !exists($argref->{FILE});
#lib/Idval/Record.pm:    fatal("undefined tag name") unless defined($name);
#lib/Idval/Record.pm:    fatal("Record::format_record: bogus arg_ref\n") if $argref and (ref $argref ne 'HASH');
#lib/Idval/Record.pm:        fatal("Uninitialized value for tag \"$tag\"\n") if !defined($self->get_value($tag));
#lib/Idval/Record.pm:            fatal("Uninitialized array value for tag \"$tag\"\n") if !defined($value);
#lib/Idval/Config.pm:#     chatty("Calculated variables are: ", Dumper($subr_vars));
#lib/Idval/Config.pm:    fatal("Need a file") unless @{$self->{INITFILES}}; # We do need at least one config file
#lib/Idval/Config.pm:            $fh = Idval::FileIO->new($fname, "r") || fatal("Can't open \"$fname\" for reading: $! in " . __PACKAGE__ . " line(" . __LINE__ . ")");
#lib/Idval/Config.pm:    idv_dbg("looking for ", join(',', @{$tagsref}), " in ", Dumper($selectors, $varsref));
#lib/Idval/Config.pm:    chatty("ck_selects: returning: ", Dumper($ar_selects, \%expanded_tags));
#lib/Idval/Config.pm:            idv_dbg("ert: for \"$regexp_tag\", checking ", Dumper($ert_conditional));
#lib/Idval/Config.pm:                idv_dbg("Comparing \"selector list\" \"$selects->{$tagname}\" \"$op\" \"$value\" resulted in ",
#lib/Idval/Config.pm:    idv_dbg("pc: parts: ", Dumper(\%parts));
#lib/Idval/Config.pm:    idv_dbg("In parse_vars, got ", scalar(@vars), " vars\n");
#lib/Idval/Config.pm:            fatal("Any '{' or '}' must be on a line by itself: <$line>\n");
#lib/Idval/Config.pm:            fatal("Conditional variable \"$name\" was already used in this block:\n{\n$block_text}\n") if exists($seen_conds{$name});
#lib/Idval/Config.pm:        idv_warn("Unrecognized input line <$line>\n");
#lib/Idval/Config.pm:    idv_dbg("returning <\n$subr\n>\n");
#lib/Idval/Config.pm:    idv_dbg("returning just_match: <\n$just_match_subr\n>\n");
#lib/Idval/Config.pm:    idv_dbg("In get_single_value with key \"$key\"\n"); ##debug1
#lib/Idval/Config.pm:    #idv_dbg("get_single_value: list result for \"$key\" is: ", Dumper($vars->{$key})); ##Dumper
#lib/Idval/Config.pm:    fatal("No filename in selectors") unless exists $selectors->{FILE};
#lib/Idval/ProviderMgr.pm:        fatal("Invalid src \"$src\" or dest \"$dest\".");
#lib/Idval/ProviderMgr.pm:    idv_dbg("Looking for provider type \"$prov_type\" src \"$src\" dest \"$dest\", with attributes <", join(',', @attributes), ">\n"); ##debug1
#lib/Idval/ProviderMgr.pm:    #idv_dbg("Converter graph is: ", Dumper($graph)); ##Dumper
#lib/Idval/ProviderMgr.pm:    #idv_dbg("From $src to $dest. Path is: ", Dumper($path)); ##Dumper
#lib/Idval/ProviderMgr.pm:            idv_dbg("cnvinfo is <", join(", ", @{$cnvinfo}), ">\n"); ##debug1
#lib/Idval/ProviderMgr.pm:            idv_dbg("converter is <$converter>\n"); ##debug1
#lib/Idval/ProviderMgr.pm:            idv_dbg("name is <$name>\n"); ##debug1
#lib/Idval/ProviderMgr.pm:            chatty("Looking up \{$prov_type\}->\{$converter\}->\{$name\}->\{$endpoint\}\n"); ##debug1
#lib/Idval/ProviderMgr.pm:            #idv_dbg("cnv is: ", Dumper($cnv)) if $src eq 'about'; ##Dumper
#lib/Idval/ProviderMgr.pm:    idv_dbg("Found ", scalar(@cnv_list), " providers for $dest -> $src\n"); ##debug1
#lib/Idval/ProviderMgr.pm:        idv_warn("No \"$prov_type\" provider found for \"$src,$dest\"\n");
#lib/Idval/ProviderMgr.pm:        idv_dbg("_get_providers: For provider type \"$prov_type\" with attributes <", join(',', @{$attributes}), ">\n"); ##debug1
#lib/Idval/ProviderMgr.pm:            idv_dbg("_get_providers: Checking conversion \"$conversion\"\n"); ##debug1
#lib/Idval/ProviderMgr.pm:    idv_dbg("_get_providers: returning <", join(',', @prov_list), ">\n"); ##debug1
#lib/Idval/ProviderMgr.pm:        fatal("Nothing provided for \"$keyword\" in ", Dumper($argref));
#lib/Idval/ProviderMgr.pm:            chatty("Adding \{$prov_type\}->\{$package\}->\{$name\}->\{$endpoint\}\n"); ##debug1
#lib/Idval/ProviderMgr.pm:            chatty("Adding \"$prov_type\" provider: From \"$src\", via \"${package}::$name\" to \"$dest\", weight: \"$weight\" ",
#lib/Idval/ProviderMgr.pm:            verbose("Provider \"$name\" is not ok: status is: $status\n"); ##debug1
#lib/Idval/ProviderMgr.pm:        #chatty("register_provider: argref is: ", Dumper($argref)); ##Dumper
#lib/Idval/ProviderMgr.pm:        chatty("Adding \"$provides\" $package\n"); ##debug1
#lib/Idval/ProviderMgr.pm:        fatal("Unrecognized provider type \"$provides\" in ", Dumper($argref));
#lib/Idval/ProviderMgr.pm:    fatal("Bad filehandle: $! for item \"$filename\"") unless defined $fh;
#lib/Idval/ProviderMgr.pm:        verbose("Plugin candidate \"$filename\" is not an Idval plugin: no \"package Idval::Plugin::...\"\n"); ##debug1
#lib/Idval/ProviderMgr.pm:    #fatal("Could not read plugin \"$filename\"\n") unless $plugin;
#lib/Idval/ProviderMgr.pm:    chatty("Plugin $filename\n"); ##debug1
#lib/Idval/ProviderMgr.pm:        chatty("Status is <$status>\n"); ##debug1
#lib/Idval/ProviderMgr.pm:        info("Error return from \"$filename\"\n");
#lib/Idval/ProviderMgr.pm:        fatal("Error reading \"$filename\": Does it return a true value at the end of the file?\n");
#lib/Idval/ProviderMgr.pm:        fatal("Error reading \"$filename\":($!) ($@)") unless $status;
#lib/Idval/ProviderMgr.pm:    fatal("No plugin file extension defined?") unless $ext;
#lib/Idval/ProviderMgr.pm:        chatty("ProviderMgr: in \"$dir\", candidates are: ", join(', ', @sources), "\n"); ##debug1
#lib/Idval/Graph.pm:        verbose("Inspecting (", join(',', @{$list}), "); length is: ", scalar(@{$list}), "\n"); ##debug1
#lib/Idval/Graph.pm:        #verbose("Initial attributes are: ", join(':', sort keys %attrs), "\n"); ##debug1
#lib/Idval/Graph.pm:            verbose("Got: ($start, $type, $end)\n"); ##debug1
#lib/Idval/Graph.pm:            verbose("In loop: attributes are: ", join(':', sort keys %attrs), "\n"); ##debug1
#lib/Idval/Graph.pm:        #idv_dbg("Storing into ", $path_info{START} . '.' . $path_info{END}, ": ", Dumper(\%path_info)); ##Dumper
#lib/Idval/Graph.pm:        verbose("\n"); ##debug1
#lib/Idval/Graph.pm:        verbose("Starting with node \"$item\"\n"); ##debug1
#lib/Idval/Graph.pm:        verbose("Clearing all visited stickers from nodes\n"); ##debug1
#lib/Idval/Graph.pm:#         #verbose("(", join(',', @{$list}), ")\n"); ##debug1
#lib/Idval/Graph.pm:    #verbose($leader x $level, "Checking \"$short_item\" against ", $self->path_as_str()); ##Dumper
#lib/Idval/Graph.pm:        #verbose($leader x $level, "Found a loop: ", Dumper($self->{CURRENT_PATH})); ##Dumper
#lib/Idval/Graph.pm:        fatal("Beginning of current path \($short_item\) is not a START_NODE\n") unless $self->is_major_node($item);
#lib/Idval/Graph.pm:#         verbose($leader x $level, "Found an internal loop. Returning.\n"); ##debug1
#lib/Idval/Graph.pm:            idv_dbg("Marking $from_item to $item as visited.\n"); ##debug1
#lib/Idval/Graph.pm:                #verbose($leader x $level, "Saving current path ", $self->path_as_str()); ##Dumper
#lib/Idval/Graph.pm:                #verbose($leader x $level, "Current path has illegal duplicate nodes: ", $self->path_as_str()); ##Dumper
#lib/Idval/Graph.pm:            #verbose($leader x $level, "Current path is too short to save: ", $self->path_as_str()); ##Dumper
#lib/Idval/Graph.pm:    #verbose($leader x $level, "Will travel from \"$short_item\" to: (", join(',', keys %{$gakker->{$item}}), ")\n"); ##debug1
#lib/Idval/Graph.pm:    #verbose($leader x $level, "Will travel from \"$short_item\" to: ", $self->path_as_str({path => [ keys %{$gakker->{$item}}]}), "\n"); ##Dumper
#lib/Idval/Graph.pm:            verbose($leader x $level, "\"$short_item\" to \"$short_next\" has already been visited.\n"); ##debug1
#lib/Idval/Graph.pm:            verbose($leader x $level, "Going from \"$short_item\" to \"$short_next\"\n"); ##debug1
#lib/Idval/Graph.pm:    #verbose($leader x $level, 'Restoring ', $self->path_as_str({trailer => ''}), ' to (', join(',', @saved_path), ")\n"); ##Dumper
#lib/Idval/Graph.pm:    #verbose($leader x $level, 'Restoring ', $self->path_as_str({trailer => ''}), ' to ', $self->path_as_str({path => \@saved_path}), "\n"); ##Dumper
#lib/Idval/Graph.pm:    #idv_dbg($leader, "Checking for duplicate nodes in ", $self->path_as_str({path=>$path})); ##Dumper
#lib/Idval/Graph.pm:    idv_dbg($leader, "One-arc path; must be OK for dup nodes\n") if $#pl == 2; ##debug1
#lib/Idval/Graph.pm:            idv_dbg($leader, "Checking dup node $end\n"); ##debug1
#lib/Idval/Graph.pm:                idv_dbg($leader, "Dup node is OK ($start->$end)\n");
#lib/Idval/Graph.pm:            idv_dbg($leader, "Bad duplicate node found for \"$start\" -> \"$end\"\n");
#lib/Idval/Graph.pm:            #idv_dbg($leader, "ATTRS: ", Dumper($self->{GRAPH}->{$start}->{$type}->{ATTRS})); ##Dumper
#lib/Idval/Graph.pm:    verbose("Looking for path: \"", $arc, "\"\n"); ##debug1
#lib/Idval/Graph.pm:        chatty("Path: \"", $arc, "\" does not exist in EXTRACTED_PATHS\n"); ##debug1
#lib/Idval/Graph.pm:    #chatty("Getting best path from:", Dumper($self->{EXTRACTED_PATHS}->{$arc})); ##Dumper
#lib/Idval/Graph.pm:    chatty("Need attributes: ", join(',', @attrs), "\n"); ##debug1
#lib/Idval/Graph.pm:        idv_dbg("Path \"", $pathinfo->{START} . '.' . $pathinfo->{END},
#lib/Idval/Graph.pm:                idv_dbg("Path $arc does not have attribute $attr, checking next path.\n"); ##debug1
#lib/Idval/Graph.pm:    #idv_dbg("Resulting path list is: ", Dumper(\@goodpaths)); ##Dumper
#lib/Idval/DataFile.pm:    my $fh = Idval::FileIO->new($datafile, "r") || fatal("Can't open tag data file \"$datafile\" for reading: $!\n");
#lib/Idval/DataFile.pm:                fatal("\"Append\" line too early in tag data file (no previous value): \"$line\"\n");
#lib/Idval/DataFile.pm:            fatal("Unrecognized line in tag data file: \"$line\"\n");
#lib/Idval/DataFile.pm:        fatal("No FILE tag in tag data record \"", join("\n", @{$blockref}), "\"\n");
#lib/Idval/Validate.pm:    idv_dbg("In parse_vars, got ", scalar(@vars), " vars\n");
lib/Idval/DoDots.pm:    info_q({force_match => 1}, "$char");
lib/Idval/DoDots.pm:    info_q({force_match => 1}, " ") if $dotnum % 4 == 0;
lib/Idval/DoDots.pm:    info_q({force_match => 1}, "\n") if $dotnum % 60 == 0;
lib/Idval/DoDots.pm:    info_q({force_match => 1}, "\n") if $dotnum % 60 != 0;
#lib/Idval/Ui.pm:        fatal("No idval configuration file found in \"$datadir\"\n");
#lib/Idval/Ui.pm:    chatty("user config file name is: \"$cfgname\"\n");
#lib/Idval/Ui.pm:    idv_dbg("UI: exts: ", join(",", @exts), ">\n");
#lib/Idval/Ui.pm:        idv_dbg("UI: file is \"$_\"\n");
#lib/Idval/Ui.pm:        idv_dbg("UI: name is $_, Suffix is: <$suffix>\n");
#lib/Idval/Ui.pm:    fatal("Tag info cache is corrupted; you will need to regenerate it (with 'gettags'):\n$@\n") if $@;
#lib/Idval/Ui.pm:            fatal("Can't open $ds_dat for writing: $ERRNO\n");
#lib/Idval/Ui.pm:        my $out = Idval::FileIO->new($fname, '>') or fatal("Can't open $fname for writing: $ERRNO\n");
#lib/Idval/Ui.pm:                verbose("Wide char in \"$line\" from \"$ftag\"\n") if ord($char) > 255;
#lib/Idval/Interp.pm:            chatty("command name: \"$cmd_name\", line args: ", join(" ", @line_args), "\n");
#lib/Idval/Interp.pm:                    fatal("Error in \"$cmd_name\": \"$status\", \"$reason\"\n");
#lib/Idval/Common.pm:        quiet("$name $cmdargs\n");
#lib/Idval/Common.pm:        verbose("\"$name\" $cmdargs\n");
#lib/Idval/Common.pm:            quiet("Error $status from: \"$name $cmdargs\"\nReturned \"$retval\"\n");
#lib/Idval/Common.pm:    #$log->fatal("Program terminated: $! (" . WTERMSIG($status) . ")\n") if WIFSIGNALED($status);
#lib/Idval/Common.pm:    fatal("what type is ", ref $this ,"?");
#lib/Idval/Common.pm:    fatal("Common object \"$key\" not found.") unless exists($common_objs{$key});
#lib/Idval/Converter.pm:    fatal("No converters in smoosh?") unless @_ and defined($_[0]);
#lib/Idval/Converter.pm:    verbose("Smooshing: ", join(" -> ", map { $_->query('name') } @{$self->{CONVERTERS}}), "\n");
#lib/Idval/Converter.pm:        verbose("Converting ", $tag_record->get_name(), " to $to_file using ", $conv->query('name'), "\n");
#lib/Idval/Converter.pm:    idv_dbg("First dest name: $dest_name, dest ext: $dest_ext\n"); ##debug1
#lib/Idval/Converter.pm:        idv_dbg("Dest name is now \"$dest_name\" (", $conv->query('name'), ")\n"); ##debug1
#lib/Idval.pm:    #verbose("option list:", Dumper(\%options));
#lib/Idval.pm:    verbose("Looking for: ", Idval::Ui::get_sysconfig_file($data_dir), "\n");
#lib/Idval.pm:    verbose("sysconfig is: \"$sysconfig_file\", userconfig is \"$userconfig_file\"\n");
#lib/Idval.pm:    chatty("Remaining args: <", join(", ", @{$self->{REMAINING_ARGS}}), ">\n");
#lib/Idval.pm:    chatty("In autoload, checking \"$name\"\n");
#lib/Idval.pm:    fatal("ERROR: Command \"$rtn\" called too early\n") unless defined $providers;
#lib/Idval.pm:    chatty("In autoload; rtn is \"$rtn\"\n");
